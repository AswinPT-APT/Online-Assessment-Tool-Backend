// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineAssessmentTool.Persistence;

#nullable disable

namespace OnlineAssessmentTool.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241122184059_AddDataSeeder")]
    partial class AddDataSeeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineAssessmentTool.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssessmentId"));

                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("AssessmentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.AssessmentScore", b =>
                {
                    b.Property<int>("AssessmentScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssessmentScoreId"));

                    b.Property<int>("AvergeScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CalculatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ScheduledAssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.HasKey("AssessmentScoreId");

                    b.HasIndex("ScheduledAssessmentId");

                    b.ToTable("AssessmentScores");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Batch", b =>
                {
                    b.Property<int>("batchid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("batchid"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("batchname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("batchid");

                    b.ToTable("batch");

                    b.HasData(
                        new
                        {
                            batchid = 1,
                            CreatedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(615),
                            batchname = "ILP 2023-24 Batch 1",
                            isActive = true
                        },
                        new
                        {
                            batchid = 2,
                            CreatedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(625),
                            batchname = "ILP 2023-24 Batch 2",
                            isActive = true
                        },
                        new
                        {
                            batchid = 3,
                            CreatedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(628),
                            batchname = "ILP 2023-24 Batch 3",
                            isActive = true
                        },
                        new
                        {
                            batchid = 4,
                            CreatedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(629),
                            batchname = "ILP 2023-24 Batch 4",
                            isActive = true
                        });
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("PermissionName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Upload questions to database",
                            PermissionName = "UPLOAD_QUESTION"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Create an assessment and schedule to batches",
                            PermissionName = "CREATE_ASSESSMENT"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Manage trainer accounts",
                            PermissionName = "TRAINER_MANAGEMENT"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Manage user role and permissions",
                            PermissionName = "ROLE_MANAGEMENT"
                        },
                        new
                        {
                            Id = 5,
                            Description = "View performance details of all batches",
                            PermissionName = "VIEW_PERFORMANCE_DETAILS"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Download and share performance reports",
                            PermissionName = "DOWNLOAD_SHARE_REPORTS"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Evaluate an assessment and publish scores",
                            PermissionName = "EVALUATE_TEST"
                        });
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.QuestionOption", b =>
                {
                    b.Property<int>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionOptionId"));

                    b.Property<List<string>>("CorrectAnswers")
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("Options")
                        .HasColumnType("jsonb");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Trainer Manager"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "External Trainer"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Internal Trainer"
                        });
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.ScheduledAssessment", b =>
                {
                    b.Property<int>("ScheduledAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduledAssessmentId"));

                    b.Property<TimeSpan>("AssessmentDuration")
                        .HasColumnType("interval");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<bool>("CanDisplayResult")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRandomizeQuestion")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanSubmitBeforeEnd")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ScheduledAssessmentId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("BatchId");

                    b.ToTable("ScheduledAssessments");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Trainee", b =>
                {
                    b.Property<int>("TraineeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TraineeId"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastPasswordReset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TraineeId");

                    b.HasIndex("BatchId");

                    b.HasIndex("UserId");

                    b.ToTable("Trainees");

                    b.HasData(
                        new
                        {
                            TraineeId = 1,
                            BatchId = 3,
                            IsActive = true,
                            JoinedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(1172),
                            UserId = 5
                        },
                        new
                        {
                            TraineeId = 2,
                            BatchId = 3,
                            IsActive = true,
                            JoinedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(1180),
                            UserId = 6
                        },
                        new
                        {
                            TraineeId = 3,
                            BatchId = 3,
                            IsActive = true,
                            JoinedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(1182),
                            UserId = 7
                        });
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.TraineeAnswer", b =>
                {
                    b.Property<int>("TraineeAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TraineeAnswerId"));

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduledAssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.HasKey("TraineeAnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("TraineeAnswers");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainerId"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastPasswordReset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TrainerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Trainers", (string)null);

                    b.HasData(
                        new
                        {
                            TrainerId = 1,
                            IsActive = true,
                            JoinedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(1058),
                            RoleId = 1,
                            UserId = 3
                        },
                        new
                        {
                            TrainerId = 2,
                            IsActive = true,
                            JoinedOn = new DateTime(2024, 11, 22, 18, 40, 58, 937, DateTimeKind.Utc).AddTicks(1067),
                            RoleId = 2,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.TrainerBatch", b =>
                {
                    b.Property<int>("Trainer_id")
                        .HasColumnType("integer");

                    b.Property<int>("Batch_id")
                        .HasColumnType("integer");

                    b.HasKey("Trainer_id", "Batch_id");

                    b.HasIndex("Batch_id");

                    b.ToTable("TrainerBatches");

                    b.HasData(
                        new
                        {
                            Trainer_id = 1,
                            Batch_id = 1
                        },
                        new
                        {
                            Trainer_id = 1,
                            Batch_id = 2
                        },
                        new
                        {
                            Trainer_id = 1,
                            Batch_id = 3
                        },
                        new
                        {
                            Trainer_id = 2,
                            Batch_id = 1
                        },
                        new
                        {
                            Trainer_id = 2,
                            Batch_id = 2
                        },
                        new
                        {
                            Trainer_id = 2,
                            Batch_id = 3
                        },
                        new
                        {
                            Trainer_id = 2,
                            Batch_id = 4
                        });
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uuid");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "ashwin_admin@sreegcloudgmail.onmicrosoft.com",
                            IsAdmin = true,
                            Phone = "9876543210",
                            UUID = new Guid("0248591b-6c92-4205-95cd-8bca5474fd39"),
                            UserType = 0,
                            Username = "Ashwin Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "rahul_admin@sreegcloudgmail.onmicrosoft.com",
                            IsAdmin = true,
                            Phone = "9876543210",
                            UUID = new Guid("e4e62d0f-82fa-49d5-b9cf-0d434f95ccc9"),
                            UserType = 0,
                            Username = "Rahul Admin"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "suneesh.thampi@sreegcloudgmail.onmicrosoft.com",
                            IsAdmin = false,
                            Phone = "9876543210",
                            UUID = new Guid("f5f0b3d1-1ffa-40b7-a7a7-afb0eec5eddd"),
                            UserType = 1,
                            Username = "Suneesh Thampi"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "lekshmi.a@sreegcloudgmail.onmicrosoft.com",
                            IsAdmin = false,
                            Phone = "9876543210",
                            UUID = new Guid("c237f64d-53f9-4b4e-9c54-4706135e1a90"),
                            UserType = 1,
                            Username = "Lekshmi A"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "revathy.rajeevan@sreegcloudgmail.onmicrosoft.com",
                            IsAdmin = false,
                            Phone = "9876543210",
                            UUID = new Guid("5bc7dd0a-1d7c-4865-a40c-fbe658575609"),
                            UserType = 2,
                            Username = "Revathy Rajeevan"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "rahul.s@sreegcloudgmail.onmicrosoft.com",
                            IsAdmin = false,
                            Phone = "9876543210",
                            UUID = new Guid("bb70bfec-179f-4849-81f9-af7a41dd4e83"),
                            UserType = 2,
                            Username = "Rahul S"
                        },
                        new
                        {
                            UserId = 7,
                            Email = "emna.jose@sreegcloudgmail.onmicrosoft.com",
                            IsAdmin = false,
                            Phone = "9876543210",
                            UUID = new Guid("477701ad-2b6d-40f0-ac4c-e1196d067a73"),
                            UserType = 2,
                            Username = "Emna Elizabeth Jose"
                        });
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            PermissionId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            PermissionId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            PermissionId = 7,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Assessment", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.AssessmentScore", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.ScheduledAssessment", "ScheduledAssessment")
                        .WithMany()
                        .HasForeignKey("ScheduledAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledAssessment");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Question", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Assessment", "Assessment")
                        .WithMany("Questions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAssessmentTool.Models.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.QuestionOption", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.ScheduledAssessment", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAssessmentTool.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Trainee", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Batch", "Batch")
                        .WithMany("Trainees")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAssessmentTool.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.TraineeAnswer", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Question", "Question")
                        .WithMany("TraineeAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Trainer", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAssessmentTool.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.TrainerBatch", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Batch", "Batch")
                        .WithMany("TrainerBatch")
                        .HasForeignKey("Batch_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAssessmentTool.Models.Trainer", "Trainer")
                        .WithMany("TrainerBatch")
                        .HasForeignKey("Trainer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("OnlineAssessmentTool.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAssessmentTool.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Assessment", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Batch", b =>
                {
                    b.Navigation("Trainees");

                    b.Navigation("TrainerBatch");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("TraineeAnswers");
                });

            modelBuilder.Entity("OnlineAssessmentTool.Models.Trainer", b =>
                {
                    b.Navigation("TrainerBatch");
                });
#pragma warning restore 612, 618
        }
    }
}
